# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Build and run tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  # BUILD_TYPE: Release
  # use via ${{env.BUILD_TYPE}} later if you need it

jobs:
  build_release:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Configure CMake - Release
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build_release -DCMAKE_BUILD_TYPE=Release

    - name: Build Release
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build_release
      # --config ${{env.BUILD_TYPE}}

    - name: Test Release
      working-directory: ${{github.workspace}}/build_release/tests
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ./test_logging

  build_debug:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Configure CMake - Debug
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build_debug -DCMAKE_BUILD_TYPE=Debug

    - name: Build Debug
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build_debug
      # --config ${{env.BUILD_TYPE}}

    - name: Test Debug
      working-directory: ${{github.workspace}}/build_debug/tests
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ./test_logging

      
  build_relWithDebugInfo:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Configure CMake - RelWithDebugInfo
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build_rel_with_deb_info -DCMAKE_BUILD_TYPE=RelWithDebugInfo

    - name: Build RelWithDebugInfo
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build_rel_with_deb_info
      # --config ${{env.BUILD_TYPE}}

    - name: Test RelWithDebugInfo
      working-directory: ${{github.workspace}}/build_rel_with_deb_info/tests
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ./test_logging

